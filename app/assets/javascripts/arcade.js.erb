console.log('helo');

function gameStart() {
  
	// our game function
	
	var gameHeight = 800;
	var gameWidth = 600;
	
	var laserTime = 0;
	var ship;
	var cursors;

	var laser;
	var lasers;
	var laserLifeSpan = 1500;  
	
	var defaultShipSize = .25;
	
	var points = 0;
	

	// phaser version 2.10.1 available at https://phaser.io/download/release/2.10.1
	var game = new Phaser.Game(gameHeight, gameWidth, Phaser.CANVAS, '', { preload: preload, create: create, update: update, render: render });
	

	//
	// pre load function, please place all code that needs to be preloaded here
	//
	function preload() {

		game.load.image('space', '<%= asset_path('space.png') %>');
		game.load.image('laser', '<%= asset_path('laser.png') %>');
		game.load.image('spaceship', '<%= asset_path('spaceship.png') %>');

    game.load.image('asteroid', '<%= asset_path('asteroid.png') %>');

	} // end of preload()

	//
	// create function: please place all create functions here
	// 
	function create() {

		// Make the game a bit faster on load
		game.renderer.clearBeforeRender = false;
		game.renderer.roundPixels = true;

		// arcade physics
		game.physics.startSystem(Phaser.Physics.ARCADE);

		// create a background
		game.add.tileSprite(0, 0, game.width, game.height, 'space');

		// our ships lasers
		lasers = game.add.group();
		lasers.enableBody = true;
		lasers.physicsBodyType = Phaser.Physics.ARCADE;

		// create 10 bullets
		lasers.createMultiple(10, 'laser');
		lasers.setAll('anchor.x', 0.5); // makes the center point of the png the "anchor point"
		lasers.setAll('anchor.y', 0.5);

		// our ship
		ship = game.add.sprite(gameHeight/2, gameWidth/2, 'spaceship'); // add shp to middle of the page
		ship.anchor.set(0.5); // anchor point will be the center of the ship
		ship.scale.setTo(defaultShipSize, defaultShipSize); // this controls the size of the ship compared to our .png file
		
		game.physics.enable(ship, Phaser.Physics.ARCADE); // enable physcis for ship
		
		asteroid = game.add.sprite(Math.random()*900, Math.random()*500, 'asteroid');
	
	
	
	  game.physics.arcade.enable(asteroid);
		

		// game input
		cursors = game.input.keyboard.createCursorKeys();
		game.input.keyboard.addKeyCapture([ Phaser.Keyboard.SPACEBAR ]);




	} // end of create()


	//
	// update function: please place all update functions here
	//
	function update() {
	    
	    game.physics.arcade.moveToObject(asteroid, ship, 50);

		
		// when pressing up, we go forward, we need to face backwards and press up to slow down
		
		
		if (cursors.up.isDown) 
		{
				game.physics.arcade.accelerationFromRotation(ship.rotation, 200, ship.body.acceleration);
		}
		
		else
		{
				ship.body.acceleration.set(0);
		}

		if (cursors.left.isDown)
		{
				ship.body.angularVelocity = -200;
			
		}
		else if (cursors.right.isDown)
		{
				ship.body.angularVelocity = 200;
		}
		else
		{
				ship.body.angularVelocity = 0;
		}

		if (game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR))
		{
				fireLasers();
		}
		screenWrap(ship);

		lasers.forEachExists(screenWrap, this);
		
		
		function fireLasers() {
			
			if (game.time.now > laserTime) 
			{
				laser = lasers.getFirstExists(false);
				
				if (laser)
				{
				    
				    laser.scale.setTo(0.3, 0.3);
					laser.reset(ship.body.x + 40, ship.body.y + 13);
                    laser.lifespan = laserLifeSpan; // how long the bullets last ( we can set a global variable for this)
                    laser.rotation = ship.rotation;
                    game.physics.arcade.velocityFromRotation(ship.rotation, 400, laser.body.velocity);
                  laserTime = game.time.now + 50;
				}
			}
		}
		
		game.physics.arcade.overlap(lasers, asteroid, bulletCollider, null, this);
		game.physics.arcade.overlap(ship, asteroid, collisionHandler, null, this); 
		
	

	} // end of update()
	
	// screenWrap
	function screenWrap (sprite) {

    if (sprite.x < 0)
    {
        sprite.x = game.width;
    }
    else if (sprite.x > game.width)
    {
        sprite.x = 0;
    }

    if (sprite.y < 0)
    {
        sprite.y = game.height;
    }
    else if (sprite.y > game.height)
    {
        sprite.y = 0;
    }

}// end of of screenWrap

function collisionHandler(spaceship, asteroid) {
  spaceship.kill();
  asteroid.kill();
}

function bulletCollider(lasers, asteroid) {
  lasers.kill();
  asteroid.kill();
  points +=1;
  console.log("pionts = " + points);
}



	//
	// render function
	//

	function render() {

	} // end of render()

}// end of gameStart()